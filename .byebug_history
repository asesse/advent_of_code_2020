exit
@contiguous_set
exit
is_contiguous?(index)
exit
@contiguous_set
remaining
current_index
exit
current_index
invalid_number
exit
invalid_number
remaining
exit
@contiguous_set
remaining
invalid_number - @numbers[current_index]
@numbers[current_index]
invalid_number
remaining
current_index
exit
preamble_numbers[0]
number
c
number
exit
find_container_bags(new_bag)
new_bag
n
new_bag
n
find_container_bags(new_bag)
new_bag
n
find_container_bags(new_bag)
new_bag
n
find_container_bags(new_bag)
new_bag
exit
@inputs
find_container_bags(new_bag)
new_bag
exit
bags
new_bags
n
new_bag
n
new_bag
@bag_list
n
new_bags
@bag_list
c
bags
exit
new_bags
n
bag
n
@bag_list
n
new_bags
c
exit
c
bags
exit
bags
exit
@inputs.map { |input| input.match(/(?<bag>\w+ \w+) bags contain/)[:bag] }
.map { |input| input.match(/(?<bag>\w+ \w+) bags contain/)[:bag] }
@inputs.filter! { |input| input.match?(/\d #{bag} (bag|bags)/) }
@inputs
exit
bags
new_bags
c
bags
new_bags
c
bags
exit
bags
@inputs.map { |input| input.match(/(?<bag>\w+ \w+) bags contain/)[:bag] }
@inputs
@inputs.filter! { |input| input.match?(/\d #{bag} (bag|bags)/) }
@inputs.filter! { |input| input.match?(/\d #{bag} (bag|bags)/) 
@inputs
@inputs.filter { |input| input.match?(/\d #{bag} (bag|bags)/) 
@inputs
@inputs.filter { |input| input.match?(/\d #{bag} (bag|bags)/) }
@inputs.map { |input|  @bag_list << input.match(/(?<bag>\w+ \w+) bags contain/)[:bag] }
@inputs.filter { |input| input.match?(/\d #{bag} (bag|bags)/) }
@inputs
bags
exit
bags
